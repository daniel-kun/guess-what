@model Io.GuessWhat.MainApp.ViewModels.ChecklistViewItem
@{
    int currentIndentation = Model.IndentationLevel * 15;
    string checklistRowCollapsedClass = currentIndentation == 0 ? "checklistrow-expanded" : "checklistrow-collapsed";
    string checklistRowParentClass = @Model.ParentId == null || @Model.ParentId.Length == 0 ? string.Empty : $"checklistrow-parent-{Model.ParentId}";
}
@if (Model.Item.Items != null && Model.Item.Items.Count > 0)
{
    <!-- This is a parent row: -->
    <tr class="marker-checkcell @checklistRowCollapsedClass @checklistRowParentClass" id="check_@Model.Item.Id">
        <td style="vertical-align:middle;" colspan="2">
            <span class="markdown" style="vertical-align:middle;color:#333;margin-left:@(currentIndentation)px;font-weight:bold;">@Html.Raw(Model.TitleAsHtml)</span>
        </td>
        <td class="checkcell" style="width:90px;">
            @{
                await Html.RenderPartialAsync("_CheckboxControl", new Io.GuessWhat.MainApp.Models.CheckboxControlViewModel($"check_ok_{Model.Item.Id}", "Yes") { Class = "checkbox-unvisited checklistrow-parent" });
            }
        </td>
        <td class="checkcell" style="width:120px;">
            @{
                await Html.RenderPartialAsync("_CheckboxControl", new Io.GuessWhat.MainApp.Models.CheckboxControlViewModel($"not_checked_{Model.Item.Id}", "No") { Class = "checkbox-unvisited checklistrow-parent" });
            }
        </td>
    </tr>
    foreach(var childItem in Model.Item.Items) {
        await Html.RenderPartialAsync("_PageFillOutChecklistRow", new Io.GuessWhat.MainApp.ViewModels.ChecklistViewItem() { Item = childItem, IndentationLevel = Model.IndentationLevel + 1, ParentId = Model.Item.Id });
    }
}
else
{
    <!-- This is a child row: -->
    <tr class="marker-checkcell @checklistRowCollapsedClass @checklistRowParentClass" id="check_@Model.Item.Id">
        <td style="vertical-align:middle;">
            <span class="markdown" style="vertical-align:middle;color:#333;margin-left:@(currentIndentation)px;">@Html.Raw(Model.TitleAsHtml)</span>
        </td>
        <td class="checkcell" style="width:60px;">
            @{
                await Html.RenderPartialAsync("_CheckboxControl", new Io.GuessWhat.MainApp.Models.CheckboxControlViewModel($"check_ok_{Model.Item.Id}", "OK") { Class = "checkbox-unvisited" });
            }
        </td>
        <td class="checkcell" style="width:90px;">
            @{
                await Html.RenderPartialAsync("_CheckboxControl", new Io.GuessWhat.MainApp.Models.CheckboxControlViewModel($"check_not_ok_{Model.Item.Id}", "Not OK") { Class = "checkbox-unvisited" });
            }
        </td>
        <td class="checkcell" style="width:120px;">
            @{
                await Html.RenderPartialAsync("_CheckboxControl", new Io.GuessWhat.MainApp.Models.CheckboxControlViewModel($"not_checked_{Model.Item.Id}", "Not checked") { Class = "checkbox-unvisited" });
            }
        </td>
    </tr>
}
