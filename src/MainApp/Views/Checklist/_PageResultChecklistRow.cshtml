@model Io.GuessWhat.MainApp.ViewModels.ChecklistResultViewItem
@{
    int currentIndentation = Model.IndentationLevel * 15;
}

@if (Model.Items != null && Model.Items.Count > 0)
{
    <tr>
    <td class="text-right" style="width:120px;">
    <!-- Render a parent node:--> 
    @switch (Model.ResultItem.Result)
    {
        case Io.GuessWhat.MainApp.Models.ChecklistResult.CheckedAndOk:
            <span style="color:green;font-weight:bold;">Yes</span>
            break;
        case Io.GuessWhat.MainApp.Models.ChecklistResult.CheckedAndNotOk:
            <span style="color:red;">(error)</span>
            break;
        case Io.GuessWhat.MainApp.Models.ChecklistResult.NotChecked:
            <span style="color:darkgray;font-weight:bold">No</span>
            break;
    }
    </td>
    <td>
        <span style="font-weight:bold;margin-left:@(currentIndentation)px;">@Model.TemplateItem.Title</span>
    </td>
    </tr>
    @if (Model.ResultItem.Result == Io.GuessWhat.MainApp.Models.ChecklistResult.CheckedAndOk) {
        foreach (var item in Model.Items)
        {
            await Html.RenderPartialAsync("_PageResultChecklistRow", item);
        }
    }
} else {
    <tr>
    <td class="text-right" style="width:120px;">
    @if (Model.ResultItem != null)
    {
        switch (Model.ResultItem.Result)
        {
            case Io.GuessWhat.MainApp.Models.ChecklistResult.CheckedAndOk:
                <span style="color:green;">OK</span>
                break;
            case Io.GuessWhat.MainApp.Models.ChecklistResult.CheckedAndNotOk:
                <span style="color:red;">Not OK</span>
                break;
            case Io.GuessWhat.MainApp.Models.ChecklistResult.NotChecked:
                <span style="color:darkgray;">(not checked)</span>
                break;
        }
    } else {
        <span style="color:red">(error)</span>
    }
    </td>
    <td>
        <span style="margin-left:@(currentIndentation)px;">@Model.TemplateItem.Title</span>
    </td>
    </tr>
}
